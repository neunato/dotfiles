#!/bin/bash

set -e

if [[ $# -ne 1 ]]; then
   echo "Expected 'setup system|system-config|firmware|packages'" >&2
   exit 1
elif [[ $1 != "system" && $1 != "system-config" && $1 != "firmware" && $1 != "packages" ]]; then
   echo "Expected 'setup system|system-config|firmware|packages'" >&2
   exit 1
elif [[ $1 == "system" && $EUID -ne 0 ]]; then
   echo "'setup system' must be run as root" >&2
   exit 1
elif [[ $1 == "system-config" && $EUID -eq 0 ]]; then
   echo "'setup system-config' must not be run as root" >&2
   exit 1
elif [[ $1 == "firmware" && $EUID -ne 0 ]]; then
   echo "'setup firmware' must be run as root" >&2
   exit 1
elif [[ $1 == "packages" && $EUID -eq 0 ]]; then
   echo "'setup packages' must not be run as root" >&2
   exit 1
elif [[ $1 == "system-config" || $1 == "packages" ]]; then
   while [[ $continue != "y" && $continue != "yes" ]]; do
      read -p "Running as $(whoami), continue? " -i "yes" -e continue
   done
fi

function setup-system {
   if ! command -v arch-chroot > /dev/null; then
      echo "Must be run from an installation medium" >&2
      exit 1
   fi

   loadkeys croat
   setfont latarcyrheb-sun32

   local bitness=$(cat /sys/firmware/efi/fw_platform_size)
   if [[ $bitness -ne 64 ]]; then
      echo "System must be in 64 bit UEFI mode" >&2
      exit 1
   fi
   if ! dmesg | grep -q "Secure boot disabled"; then
       echo "Secure Boot must be disabled" >&2
       exit 1
   fi

   {
   lsblk
   echo "================================================="
   while [[ -z $disk || $disk =~ " " ]]; do
      read -p "Enter disk: " disk
   done
   while [[ -z $disk_password || $disk_password =~ " " ]]; do
      read -p "Enter disk encryption password: " -s disk_password
      echo ""
   done
   while [[ -z $root_password || $root_password =~ " " ]]; do
      read -p "Enter root password: " -s root_password
      echo ""
   done
   while [[ -z $username || $username =~ " " ]]; do
      read -p "Enter username: " username
   done
   while [[ -z $password || $password =~ " " ]]; do
      read -p "Enter password: " -s password
      echo ""
   done
   while [[ -z $dotfiles_repo || $dotfiles_repo =~ " " ]]; do
      read -p "Enter dotfiles repository GitHub path: " -i "neunato/dotfiles" -e dotfiles_repo
   done
   echo "================================================="

   if df | grep -q "^/dev/${disk}1 "; then
      echo "Already installed" >&2
      exit 1
   fi
   if [[ -n $dotfiles_repo ]] && ! github_repo_exists "$dotfiles_repo"; then
      echo "Repository github.com/$dotfiles_repo cannot be accessed" >&2
      exit 1
   fi
   if ! diff -q -b <(cat $0) <(curl -s -L "$(github_repo_file_url "$dotfiles_repo" "scripts/setup")") > /dev/null; then
      echo "A newer version of this script exists at github.com/$dotfiles_repo" >&2
      exit 1
   fi

   # disk partitions
   echo -e "type=uefi, size=512M, bootable\ntype=linux, size=+\n" | sfdisk "/dev/$disk"

   local part_boot=$(lsblk -l | grep part | grep "$disk" | head -1 | tail -1 | awk '{print $1;}')
   local part_root=$(lsblk -l | grep part | grep "$disk" | head -2 | tail -1 | awk '{print $1;}')

   echo -n "$disk_password" | cryptsetup -v luksFormat "/dev/$part_root" -
   echo -n "$disk_password" | cryptsetup open "/dev/$part_root" root -
   mkfs.ext4 /dev/mapper/root
   mount /dev/mapper/root /mnt

   fallocate -l 16G /mnt/swapfile
   chmod 600 /mnt/swapfile
   mkswap -U clear /mnt/swapfile
   swapon /mnt/swapfile

   mkfs.fat -F 32 "/dev/$part_boot"
   mount --mkdir "/dev/$part_boot" /mnt/boot

   # essential packages
   sed -i "s/#ParallelDownloads/ParallelDownloads/" /etc/pacman.conf
   pacman -Sy --needed --noconfirm archlinux-keyring
   pacstrap -K /mnt base base-devel linux linux-firmware
   genfstab -U /mnt >> /mnt/etc/fstab

   # user accounts
   as-chroot bash -c "
      pacman -S --needed --noconfirm sudo

      useradd -m '$username' -G wheel
      echo 'root:$root_password' | chpasswd
      echo '$username:$password' | chpasswd
      echo '%wheel ALL=(ALL:ALL) ALL' | EDITOR='tee --append' visudo > /dev/null
   "

   # system configuration
   as-chroot setup-system-config "$username"

   # packages
   as-chroot setup-packages "$username"

   # user configuration
   local home="/home/$username"
   as-chroot bash -c "
      pacman -S --needed --noconfirm git

      rm -rf '$home/*' '$home/.*' 2> /dev/null
      cd '$home'
      git config --global user.name root
      git config --global safe.directory '$home'
      git config --global init.defaultBranch master
      git init
      git remote add g $(github_repo_url "$dotfiles_repo")
      git fetch g
      git reset --hard g/master
      git branch -u g/master
      git config --global --unset user.name
      git config --global --unset safe.directory
      git config --global --unset init.defaultBranch

      mkdir '$home/dev'
      mkdir '$home/download'
      mkdir '$home/music'
      mkdir '$home/pictures'
      mkdir '$home/videos'

      chown -R '$username:$username' .
   "

   cat /tmp/arch_setup.log | as-chroot tee /var/tmp/arch_setup.log > /dev/null

   # reboot
   reboot
   } 2>&1 | tee /tmp/arch_setup.log
}

function setup-system-config {
   local username=$1
   local part_root_uuid=$(dmsetup info -c --noheadings -o uuid /dev/mapper/root 2> /dev/null)
   if [[ ! $part_root_uuid =~ ^CRYPT-LUKS2-(.{8})(.{4})(.{4})(.{4})(.{12})-root$ ]]; then
      echo "Root partition not found" >&2
      exit 1
   fi
   part_root_uuid="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}-${BASH_REMATCH[3]}-${BASH_REMATCH[4]}-${BASH_REMATCH[5]}"

   sed -i "s/#ParallelDownloads/ParallelDownloads/" /etc/pacman.conf

   # localisation
   echo 'arch' | tee /etc/hostname > /dev/null

   ln -sf /usr/share/zoneinfo/Europe/Zagreb /etc/localtime
   hwclock --systohc

   sed -i 's/#en_GB/en_GB/g' /etc/locale.gen
   sed -i 's/#hr_HR/hr_HR/g' /etc/locale.gen
   locale-gen

   echo 'LANG=en_GB.utf8'         | tee          /etc/locale.conf > /dev/null
   echo 'LANGUAGE=en_GB:en_US:en' | tee --append /etc/locale.conf > /dev/null
   echo 'LC_TIME=hr_HR.utf8'      | tee --append /etc/locale.conf > /dev/null

   echo 'KEYMAP=croat'           | tee          /etc/vconsole.conf > /dev/null
   echo 'XKBLAYOUT=hr'           | tee --append /etc/vconsole.conf > /dev/null
   echo 'FONT=latarcyrheb-sun32' | tee --append /etc/vconsole.conf > /dev/null

   echo 'Section "InputClass"'                   | tee          /etc/X11/xorg.conf > /dev/null
   echo '    Identifier "system-keyboard"'       | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    MatchIsKeyboard "true"'             | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Option "XkbLayout" "hr"'            | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'EndSection'                             | tee --append /etc/X11/xorg.conf > /dev/null
   echo ''                                       | tee --append /etc/X11/xorg.conf > /dev/null

   # xorg config
   echo 'Section "OutputClass"'                  | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Identifier "intel"'                 | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    MatchDriver "i915"'                 | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Driver "modesetting"'               | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'EndSection'                             | tee --append /etc/X11/xorg.conf > /dev/null
   echo ''                                       | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'Section "OutputClass"'                  | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Identifier "nvidia"'                | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    MatchDriver "nvidia-drm"'           | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Driver "nvidia"'                    | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Option "PrimaryGPU" "true"'         | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    ModulePath "/usr/lib/nvidia/xorg"'  | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    ModulePath "/usr/lib/xorg/modules"' | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'EndSection'                             | tee --append /etc/X11/xorg.conf > /dev/null
   echo ''                                       | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'Section "ServerFlags"'                  | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Option "BlankTime" "0"'             | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Option "StandbyTime" "15"'          | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Option "SuspendTime" "15"'          | tee --append /etc/X11/xorg.conf > /dev/null
   echo '    Option "OffTime" "0"'               | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'EndSection'                             | tee --append /etc/X11/xorg.conf > /dev/null

   # boot loader
   pacman -S --needed --noconfirm grub
   pacman -S --needed --noconfirm efibootmgr
   pacman -S --needed --noconfirm intel-ucode

   cat /dev/null > /etc/mkinitcpio.conf
   echo 'PRESETS=("default")'                                                                                        | tee          /etc/mkinitcpio.d/linux.preset > /dev/null
   echo 'default_kver="/boot/vmlinuz-linux"'                                                                         | tee --append /etc/mkinitcpio.d/linux.preset > /dev/null
   echo 'default_image="/boot/initramfs-linux.img"'                                                                  | tee --append /etc/mkinitcpio.d/linux.preset > /dev/null
   echo 'default_microcode="/boot/intel-ucode.img"'                                                                  | tee --append /etc/mkinitcpio.d/linux.preset > /dev/null
   echo 'default_config="/etc/mkinitcpio.conf"'                                                                      | tee --append /etc/mkinitcpio.d/linux.preset > /dev/null
   echo 'default_options="-A systemd,autodetect,modconf,kms,keyboard,sd-vconsole,block,sd-encrypt,filesystems,fsck"' | tee --append /etc/mkinitcpio.d/linux.preset > /dev/null
   mkinitcpio -P

   grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
   sed -i 's/^GRUB_DEFAULT=.*/GRUB_DEFAULT=0/'                  /etc/default/grub
   sed -i 's/^GRUB_TIMEOUT=.*/GRUB_TIMEOUT=0/'                  /etc/default/grub
   sed -i 's/^GRUB_TIMEOUT_STYLE=.*/GRUB_TIMEOUT_STYLE=hidden/' /etc/default/grub
   sed -i "s/^GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet loglevel=3 systemd.show_status=error rd.udev.log_level=3 rd.luks.name=$part_root_uuid=root rd.luks.options=$part_root_uuid=timeout=0,tries=0,password-echo=no rootflags=x-systemd.device-timeout=0 nvidia_drm.modeset=1\"/" /etc/default/grub
   grub-mkconfig -o /boot/grub/grub.cfg
   sed -i 's/echo\t/#echo\t/g' /boot/grub/grub.cfg

   # silent boot
   echo 'kernel.printk = 3 3 3 3' | tee /etc/sysctl.d/20-quiet-printk.conf > /dev/null

   mkdir -p /etc/systemd/system/systemd-fsck-root.service.d
   echo '[Service]'                     | tee          /etc/systemd/system/systemd-fsck-root.service.d/silent-boot > /dev/null
   echo 'StandardOutput=null'           | tee --append /etc/systemd/system/systemd-fsck-root.service.d/silent-boot > /dev/null
   echo 'StandardError=journal+console' | tee --append /etc/systemd/system/systemd-fsck-root.service.d/silent-boot > /dev/null

   mkdir -p /etc/systemd/system/systemd-fsck@.service.d
   echo '[Service]'                     | tee          /etc/systemd/system/systemd-fsck@.service.d/silent-boot > /dev/null
   echo 'StandardOutput=null'           | tee --append /etc/systemd/system/systemd-fsck@.service.d/silent-boot > /dev/null
   echo 'StandardError=journal+console' | tee --append /etc/systemd/system/systemd-fsck@.service.d/silent-boot > /dev/null

   mkdir -p /etc/systemd/system/getty@tty1.service.d
   echo '[Service]'                                                                                           | tee          /etc/systemd/system/getty@tty1.service.d/skip-username.conf > /dev/null
   echo 'ExecStart='                                                                                          | tee --append /etc/systemd/system/getty@tty1.service.d/skip-username.conf > /dev/null
   echo "ExecStart=-/bin/agetty --skip-login --nonewline --noissue --autologin $username --noclear %I \$TERM" | tee --append /etc/systemd/system/getty@tty1.service.d/skip-username.conf > /dev/null
}

function setup-packages {
   local username=$1

   if [[ ! -x $(command -v paru) ]]; then
      install-paru
   fi

   if ! grep -Fxq "[sublime-text]" /etc/pacman.conf; then
      curl -s -O https://download.sublimetext.com/sublimehq-pub.gpg && pacman-key --add sublimehq-pub.gpg && pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg
      echo -e "\n[sublime-text]\nServer = https://download.sublimetext.com/arch/dev/x86_64" | tee --append /etc/pacman.conf > /dev/null
   fi

   pacman -Syu --noconfirm

   # hardware-related
   pacman -S --needed --noconfirm fwupd
   pacman -S --needed --noconfirm networkmanager
   pacman -S --needed --noconfirm mesa
   pacman -S --needed --noconfirm mesa-utils
   pacman -S --needed --noconfirm intel-media-driver
   pacman -S --needed --noconfirm nvidia
   pacman -S --needed --noconfirm nvidia-prime
   pacman -S --needed --noconfirm nvidia-utils
   pacman -S --needed --noconfirm nvidia-settings
   pacman -S --needed --noconfirm alsa-firmware
   pacman -S --needed --noconfirm sof-firmware
   pacman -S --needed --noconfirm pipewire
   pacman -S --needed --noconfirm pipewire-audio
   pacman -S --needed --noconfirm pipewire-alsa
   pacman -S --needed --noconfirm pipewire-pulse
   pacman -S --needed --noconfirm pipewire-jack
   pacman -S --needed --noconfirm wireplumber
   pacman -S --needed --noconfirm alsa-utils
   pacman -S --needed --noconfirm tlp
   pacman -S --needed --noconfirm acpid
   pacman -S --needed --noconfirm polkit

   # x11
   pacman -S --needed --noconfirm xorg-server
   pacman -S --needed --noconfirm xorg-xinit
   pacman -S --needed --noconfirm xorg-xrandr
   pacman -S --needed --noconfirm xorg-xprop
   pacman -S --needed --noconfirm xorg-xev
   pacman -S --needed --noconfirm xclip
   pacman -S --needed --noconfirm xdotool
   pacman -S --needed --noconfirm picom

   # window manager
   pacman -S --needed --noconfirm i3-wm
   pacman -S --needed --noconfirm i3blocks
   pacman -S --needed --noconfirm i3lock
   pacman -S --needed --noconfirm xss-lock

   # utilities
   pacman -S --needed --noconfirm sudo
   pacman -S --needed --noconfirm nano
   pacman -S --needed --noconfirm bat
   pacman -S --needed --noconfirm jq
   pacman -S --needed --noconfirm bc
   pacman -S --needed --noconfirm wgetpaste
   pacman -S --needed --noconfirm dunst
   pacman -S --needed --noconfirm libnotify
   pacman -S --needed --noconfirm rofi
   pacman -S --needed --noconfirm maim
   pacman -S --needed --noconfirm ffmpeg
   pacman -S --needed --noconfirm id3v2
   pacman -S --needed --noconfirm man-db
   pacman -S --needed --noconfirm man-pages

   # ssh, vpn
   pacman -S --needed --noconfirm openssh
   pacman -S --needed --noconfirm openvpn
   pacman -S --needed --noconfirm openconnect

   # developer tooling
   pacman -S --needed --noconfirm git
   pacman -S --needed --noconfirm python
   pacman -S --needed --noconfirm python-pip
   pacman -S --needed --noconfirm nodejs
   pacman -S --needed --noconfirm npm
   pacman -S --needed --noconfirm rust
   pacman -S --needed --noconfirm go
   pacman -S --needed --noconfirm docker
   pacman -S --needed --noconfirm docker-compose

   # gui applications
   pacman -S --needed --noconfirm kitty
   pacman -S --needed --noconfirm nautilus
   pacman -S --needed --noconfirm feh
   pacman -S --needed --noconfirm mpv
   pacman -S --needed --noconfirm firefox
   pacman -S --needed --noconfirm chromium
   pacman -S --needed --noconfirm calibre
   pacman -S --needed --noconfirm transmission-gtk
   pacman -S --needed --noconfirm sublime-text
   pacman -S --needed --noconfirm sublime-merge

   # virtualisation
   pacman -S --needed --noconfirm qemu-base
   pacman -S --needed --noconfirm virt-manager
   pacman -S --needed --noconfirm dnsmasq
   pacman -S --needed --noconfirm --ask 4 iptables-nft

   # fonts
   pacman -S --needed --noconfirm ttf-jetbrains-mono
   pacman -S --needed --noconfirm ttf-nerd-fonts-symbols-mono

   # aur packages
   echo "$username ALL=(ALL:ALL) NOPASSWD: ALL" | EDITOR="tee --append" visudo > /dev/null

   as-user $username paru -S --needed --noconfirm lux
   as-user $username paru -S --needed --noconfirm xsct
   as-user $username paru -S --needed --noconfirm openvpn-update-systemd-resolved
   as-user $username paru -S --needed --noconfirm glances
   as-user $username paru -S --needed --noconfirm mongodb-bin
   as-user $username paru -S --needed --noconfirm mongosh-bin

   head -n -1 /etc/sudoers | tee /etc/sudoers > /dev/null

   # groups, services, configuration
   lux > /dev/null

   usermod -aG docker "$username"
   usermod -aG libvirt "$username"

   systemctl --user --machine="$username@" enable pipewire-pulse.service
   systemctl enable NetworkManager
   systemctl enable tlp.service
   systemctl enable acpid.service
   systemctl enable systemd-resolved
   systemctl enable docker.service
   systemctl enable libvirtd.service
   systemctl enable mongodb.service
   systemctl mask systemd-rfkill.service
   systemctl mask systemd-rfkill.socket

   if [[ $(stat -c %d:%i /) == $(stat -c %d:%i /proc/1/root/.) ]]; then
      systemctl --user --machine="$username@" start pipewire-pulse.service
      systemctl start NetworkManager
      systemctl start tlp.service
      systemctl start acpid.service
      systemctl start systemd-resolved
      systemctl start docker.service
      systemctl start libvirtd.service
      systemctl start mongodb.service
   fi

   sed -i 's/#unix_sock_group/unix_sock_group/g'                /etc/libvirt/libvirtd.conf
   sed -i 's/#unix_sock_rw_perms/unix_sock_rw_perms/g'          /etc/libvirt/libvirtd.conf
   sed -i 's/#user = "libvirt-qemu"/user = "'"$username"'"/g'   /etc/libvirt/qemu.conf
   sed -i 's/#group = "libvirt-qemu"/group = "'"$username"'"/g' /etc/libvirt/qemu.conf
}

function setup-firmware {
   pacman -S --needed --noconfirm fwupd
   fwupdmgr --no-reboot-check refresh
   fwupdmgr --no-reboot-check update
}

function install-paru {
   local url="https://aur.archlinux.org/cgit/aur.git/snapshot/paru.tar.gz"
   local dir="/var/tmp/paru"
   pacman -S --needed --noconfirm git
   pacman -S --needed --noconfirm rust
   mkdir "$dir"
   chmod 777 "$dir"
   curl -s -L "$url" | tar xvz -C "$dir" --strip-components 1
   as-nobody /bin/bash -c "cd $dir && CARGO_HOME=$dir makepkg"
   pacman -U --needed --noconfirm "$(ls $dir/*.tar.zst | grep -v debug)"
   rm -rf "$dir"
}

function wrap-f {
   local args=("$@")
   local str="set -e; $(declare -f);"
   for i in "${args[@]}"; do
       str+=" \"$(echo "$i" | sed 's/"/\\"/g')\""
   done
   echo "$str"
}

function as-sudo {
   sudo bash -c "$(wrap-f "$@")"
}

function as-nobody {
   su nobody -s /bin/bash -c "$(wrap-f "$@")"
}

function as-user {
   local user=$1
   shift
   su "$user" -s /bin/bash -c "$(wrap-f "$@")"
}

function as-chroot {
   arch-chroot /mnt /bin/bash -c "$(wrap-f "$@")"
}

function github_repo_exists {
   local path=$1
   local token=$2
   local headers=""
   if [[ -n $token ]]; then
      headers="Authorization: Bearer $token"
   fi
   if curl -s -H "$headers" $(github_api_url "$path") | grep -q "Not Found"; then
      return 1
   fi
}

function github_repo_url {
   local repo=$1
   local token=$2
   if [[ -n $token ]]; then
      token="$token@"
   fi
   echo "https://${token}github.com/$repo.git"
}

function github_repo_file_url {
   local repo=$1
   local path=$2
   echo "https://raw.githubusercontent.com/$repo/master/$path"
}

function github_api_url {
   local repo=$1
   echo "https://api.github.com/repos/$repo"
}

case "$1" in
   system)        setup-system;;
   system-config) as-sudo setup-system-config $(whoami);;
   firmware)      setup-firmware;;
   packages)      as-sudo setup-packages $(whoami);;
esac
