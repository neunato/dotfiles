#!/bin/bash

set -e

if [[ ! " system system-config firmware packages " =~ " $1 " ]]; then
   echo "Expected 'setup system|system-config|firmware|packages'" >&2
   exit 1
elif [[ $1 != "system-config" && $# -ne 1 ]]; then
   echo "Expected 'setup system|system-config|firmware|packages'" >&2
   exit 1
elif [[ $1 == "system-config" && ($# -gt 2 || ! "--no-gpu" =~ "$2" ) ]]; then
   echo "Expected 'setup system-config [--no-gpu]'" >&2
   exit 1
elif [[ $1 == "system" && $EUID -ne 0 ]]; then
   echo "'setup system' must be run as root" >&2
   exit 1
elif [[ $1 == "system-config" && $EUID -eq 0 ]]; then
   echo "'setup system-config' must not be run as root" >&2
   exit 1
elif [[ $1 == "firmware" && $EUID -ne 0 ]]; then
   echo "'setup firmware' must be run as root" >&2
   exit 1
elif [[ $1 == "packages" && $EUID -eq 0 ]]; then
   echo "'setup packages' must not be run as root" >&2
   exit 1
elif [[ $1 == "system-config" || $1 == "packages" ]]; then
   while [[ $continue != "y" && $continue != "yes" ]]; do
      read -p "Running as $(whoami), continue? " -i "yes" -e continue
   done
fi

function setup_system {
   if ! command -v arch-chroot > /dev/null; then
      echo "Must be run from an installation medium" >&2
      exit 1
   fi

   loadkeys croat
   setfont latarcyrheb-sun32

   local bitness=$(cat /sys/firmware/efi/fw_platform_size)
   if [[ $bitness -ne 64 ]]; then
      echo "System must be in 64 bit UEFI mode" >&2
      exit 1
   fi
   if ! dmesg | grep -q "Secure boot disabled"; then
       echo "Secure Boot must be disabled" >&2
       exit 1
   fi

   {
   lsblk
   echo "================================================="
   while [[ -z $disk || $disk =~ " " ]]; do
      read -p "Enter disk: " disk
   done
   while [[ -z $disk_password || $disk_password =~ " " ]]; do
      read -p "Enter disk encryption password: " -s disk_password
      echo ""
   done
   while [[ -z $root_password || $root_password =~ " " ]]; do
      read -p "Enter root password: " -s root_password
      echo ""
   done
   while [[ -z $username || $username =~ " " ]]; do
      read -p "Enter username: " username
   done
   while [[ -z $password || $password =~ " " ]]; do
      read -p "Enter password: " -s password
      echo ""
   done
   while [[ -z $dotfiles_repo || $dotfiles_repo =~ " " ]]; do
      read -p "Enter dotfiles repository GitHub path: " -i "neunato/dotfiles" -e dotfiles_repo
   done
   echo "================================================="

   if df | grep -q "^/dev/${disk}1 "; then
      echo "Already installed" >&2
      exit 1
   fi
   if [[ -n $dotfiles_repo ]] && ! github_repo_exists "$dotfiles_repo"; then
      echo "Repository github.com/$dotfiles_repo cannot be accessed" >&2
      exit 1
   fi
   if ! diff -q -b <(cat $0) <(curl -s -L "$(github_repo_file_url "$dotfiles_repo" "scripts/setup")") > /dev/null; then
      echo "A newer version of this script exists at github.com/$dotfiles_repo" >&2
      exit 1
   fi

   # disk partitions
   echo -e "type=uefi, size=512M, bootable\ntype=linux, size=+\n" | sfdisk "/dev/$disk"

   local part_boot=$(lsblk -l | grep part | grep "$disk" | head -1 | tail -1 | awk '{print $1;}')
   local part_root=$(lsblk -l | grep part | grep "$disk" | head -2 | tail -1 | awk '{print $1;}')

   echo -n "$disk_password" | cryptsetup -v luksFormat "/dev/$part_root" -
   echo -n "$disk_password" | cryptsetup open "/dev/$part_root" root -
   mkfs.ext4 /dev/mapper/root
   mount /dev/mapper/root /mnt

   fallocate -l 16G /mnt/swapfile
   chmod 600 /mnt/swapfile
   mkswap -U clear /mnt/swapfile
   swapon /mnt/swapfile

   mkfs.fat -F 32 "/dev/$part_boot"
   mount --mkdir "/dev/$part_boot" /mnt/boot

   # essential packages
   sed -i "s/#ParallelDownloads/ParallelDownloads/" /etc/pacman.conf
   pacman -Sy --needed --noconfirm archlinux-keyring
   pacstrap -K /mnt base base-devel linux linux-firmware
   genfstab -U /mnt >> /mnt/etc/fstab

   # user accounts
   as_chroot bash -c "
      pacman -S --needed --noconfirm sudo

      useradd -m '$username' -G wheel,video
      echo 'root:$root_password' | chpasswd
      echo '$username:$password' | chpasswd
      echo '%wheel ALL=(ALL:ALL) ALL' | EDITOR='tee' visudo > /dev/null
   "

   # system configuration
   as_chroot setup_system_config "$username"

   # packages
   as_chroot setup_packages "$username"

   # user configuration
   local home="/home/$username"
   as_chroot bash -c "
      pacman -S --needed --noconfirm git

      rm -rf '$home/*' '$home/.*' 2> /dev/null
      cd '$home'
      git config --global user.name root
      git config --global safe.directory '$home'
      git config --global init.defaultBranch master
      git init
      git config core.hooksPath .hooks
      git remote add g $(github_repo_url "$dotfiles_repo")
      git fetch g
      git reset --hard g/master
      git branch -u g/master
      git config --global --unset user.name
      git config --global --unset safe.directory
      git config --global --unset init.defaultBranch

      mkdir '$home/dev'
      mkdir '$home/download'
      mkdir '$home/music'
      mkdir '$home/pictures'
      mkdir '$home/videos'

      chown -R '$username:$username' .
   "

   cat /tmp/arch_setup.log | as_chroot tee /var/tmp/arch_setup.log > /dev/null

   # reboot
   reboot
   } 2>&1 | tee /tmp/arch_setup.log
}

function setup_system_config {
   local username=$1
   local graphics=$2
   local part_root_uuid=$(dmsetup info -c --noheadings -o uuid /dev/mapper/root 2> /dev/null)
   if [[ ! $part_root_uuid =~ ^CRYPT-LUKS2-(.{8})(.{4})(.{4})(.{4})(.{12})-root$ ]]; then
      echo "Root partition not found" >&2
      exit 1
   fi
   part_root_uuid="${BASH_REMATCH[1]}-${BASH_REMATCH[2]}-${BASH_REMATCH[3]}-${BASH_REMATCH[4]}-${BASH_REMATCH[5]}"
   local swapfile_uuid="$(findmnt -no UUID -T /swapfile)"
   local swapfile_offset="$(filefrag -v /swapfile | awk '$1=="0:" {print substr($4, 1, length($4)-2)}')"

   if [[ -z $graphics ]] && nvidia_gpu_exists; then
      graphics="nvidia"
   fi

   sed -i "s/#ParallelDownloads/ParallelDownloads/" /etc/pacman.conf

   # localisation
   echo 'arch' | tee /etc/hostname > /dev/null

   ln -sf /usr/share/zoneinfo/Europe/Zagreb /etc/localtime
   hwclock --systohc
   systemctl enable systemd-timesyncd.service

   sed -i 's/^#en_GB\.UTF-8/en_GB.UTF-8/'            /etc/locale.gen
   sed -i 's/^#en_US\.UTF-8/en_US.UTF-8/'            /etc/locale.gen
   sed -i 's/^d_t_fmt .*/d_t_fmt "%d-%m-%Y %T"/'   /usr/share/i18n/locales/en_GB
   sed -i 's/^d_t_fmt .*/d_t_fmt "%d-%m-%Y %T"/'   /usr/share/i18n/locales/en_US
   sed -i 's/^date_fmt .*/date_fmt "%d-%m-%Y %T"/' /usr/share/i18n/locales/en_GB
   sed -i 's/^date_fmt .*/date_fmt "%d-%m-%Y %T"/' /usr/share/i18n/locales/en_US
   locale-gen

   as_user $username mkdir -p "/home/$username/.config/fontconfig/conf.d"
   as_user $username ln -sf /usr/share/fontconfig/conf.avail/50-user.conf "/home/$username/.config/fontconfig/conf.d"
   as_user $username fc-cache

   echo 'LANG=en_GB.UTF-8'       | tee          /etc/locale.conf   > /dev/null
   echo 'KEYMAP=croat'           | tee          /etc/vconsole.conf > /dev/null
   echo 'FONT=latarcyrheb-sun32' | tee --append /etc/vconsole.conf > /dev/null

   echo 'Section "InputClass"'                     | tee          /etc/X11/xorg.conf > /dev/null
   echo '   Identifier "keyboard"'                 | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   MatchIsKeyboard "true"'                | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "XkbLayout" "hr"'               | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'EndSection'                               | tee --append /etc/X11/xorg.conf > /dev/null
   echo ''                                         | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'Section "InputClass"'                     | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Identifier "touchpad"'                 | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   MatchIsTouchpad "true"'                | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "ClickMethod" "clickfinger"'    | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "NaturalScrolling" "true"'      | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "AccelerationProfile" "7"'      | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "AccelerationNumerator" "25"'   | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "AccelerationDenominator" "10"' | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "AccelerationThreshold" "40"'   | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "ConstantDeceleration" "2"'     | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "VelocityScale" "15"'           | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'EndSection'                               | tee --append /etc/X11/xorg.conf > /dev/null
   echo ''                                         | tee --append /etc/X11/xorg.conf > /dev/null

   # xorg config
   echo 'Section "OutputClass"'                    | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Identifier "intel"'                    | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   MatchDriver "i915"'                    | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Driver "modesetting"'                  | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'EndSection'                               | tee --append /etc/X11/xorg.conf > /dev/null
   echo ''                                         | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'Section "OutputClass"'                    | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Identifier "nvidia"'                   | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   MatchDriver "nvidia-drm"'              | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Driver "nvidia"'                       | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "PrimaryGPU" "true"'            | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   ModulePath "/usr/lib/nvidia/xorg"'     | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   ModulePath "/usr/lib/xorg/modules"'    | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'EndSection'                               | tee --append /etc/X11/xorg.conf > /dev/null
   echo ''                                         | tee --append /etc/X11/xorg.conf > /dev/null

   echo 'Section "ServerFlags"'                    | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "BlankTime" "0"'                | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "StandbyTime" "0"'              | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "SuspendTime" "30"'             | tee --append /etc/X11/xorg.conf > /dev/null
   echo '   Option "OffTime" "0"'                  | tee --append /etc/X11/xorg.conf > /dev/null
   echo 'EndSection'                               | tee --append /etc/X11/xorg.conf > /dev/null

   # boot process
   pacman -S --needed --noconfirm grub efibootmgr intel-ucode plymouth

   local url=$(github_repo_archive_url "neunato/plymouth-theme-silence" "master")
   local dir="/usr/share/plymouth/themes/silence"
   extract_tarball "$url" "$dir"
   chmod 644 "$dir/"*
   plymouth-set-default-theme silence

   cat /dev/null > /etc/mkinitcpio.conf
   echo 'PRESETS=("default")'                                                                                                           | tee          /etc/mkinitcpio.d/linux.preset > /dev/null
   echo 'default_kver="/boot/vmlinuz-linux"'                                                                                            | tee --append /etc/mkinitcpio.d/linux.preset > /dev/null
   echo 'default_image="/boot/initramfs-linux.img"'                                                                                     | tee --append /etc/mkinitcpio.d/linux.preset > /dev/null
   echo 'default_config="/etc/mkinitcpio.conf"'                                                                                         | tee --append /etc/mkinitcpio.d/linux.preset > /dev/null
   echo 'default_options="-A systemd,plymouth,autodetect,microcode,modconf,kms,keyboard,sd-vconsole,block,sd-encrypt,filesystems,fsck"' | tee --append /etc/mkinitcpio.d/linux.preset > /dev/null
   mkinitcpio -P

   grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
   sed -i 's/^GRUB_DEFAULT=.*/GRUB_DEFAULT=0/'                  /etc/default/grub
   sed -i 's/^GRUB_TIMEOUT=.*/GRUB_TIMEOUT=0/'                  /etc/default/grub
   sed -i 's/^GRUB_TIMEOUT_STYLE=.*/GRUB_TIMEOUT_STYLE=hidden/' /etc/default/grub
   sed -i "s/^GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash nowatchdog modprobe.blacklist=iTCO_wdt rd.luks.name=$part_root_uuid=root rd.luks.options=$part_root_uuid=timeout=0,tries=0,password-echo=no resume=UUID=$swapfile_uuid resume_offset=$swapfile_offset rootflags=x-systemd.device-timeout=0 nvidia_drm.modeset=$([[ $graphics == "nvidia" ]] && echo 1 || echo 0)\"/" /etc/default/grub
   grub-mkconfig -o /boot/grub/grub.cfg
   sed -i 's/echo\t/#echo\t/g' /boot/grub/grub.cfg

   mkdir -p /etc/systemd/system/getty@tty1.service.d
   echo '[Service]'                                                                                           | tee          /etc/systemd/system/getty@tty1.service.d/skip-prompt.conf > /dev/null
   echo 'ExecStart='                                                                                          | tee --append /etc/systemd/system/getty@tty1.service.d/skip-prompt.conf > /dev/null
   echo "ExecStart=-/bin/agetty --skip-login --nonewline --noissue --autologin $username --noclear %I \$TERM" | tee --append /etc/systemd/system/getty@tty1.service.d/skip-prompt.conf > /dev/null

   # udev rules
   cat /dev/null > /etc/udev/rules.d/no-nvidia.rules
   if [[ $graphics != "nvidia" ]]; then
      echo 'ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c0330", ATTR{power/control}="auto", ATTR{remove}="1"'                                                              | tee          /etc/udev/rules.d/no-nvidia.rules > /dev/null
      echo 'ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x0c8000", ATTR{power/control}="auto", ATTR{remove}="1"'                                                              | tee --append /etc/udev/rules.d/no-nvidia.rules > /dev/null
      echo 'ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x040300", ATTR{power/control}="auto", ATTR{remove}="1"'                                                              | tee --append /etc/udev/rules.d/no-nvidia.rules > /dev/null
      echo 'ACTION=="add", SUBSYSTEM=="pci", ATTR{vendor}=="0x10de", ATTR{class}=="0x03[0-9]*", ATTR{power/control}="auto", ATTR{remove}="1"'                                                            | tee --append /etc/udev/rules.d/no-nvidia.rules > /dev/null
   fi
   echo 'ACTION=="add", SUBSYSTEM=="backlight", RUN+="/bin/chgrp video $sys$devpath/brightness", RUN+="/bin/chmod g+w $sys$devpath/brightness"'                                                          | tee          /etc/udev/rules.d/backlight.rules > /dev/null
   echo 'ACTION=="change", SUBSYSTEM=="drm", ENV{DISPLAY}=":0", ENV{XAUTHORITY}="/home/'$username'/.Xauthority", ENV{HOME}="/home/'$username'" RUN+="/home/'$username'/scripts/screen-layout --restore"' | tee          /etc/udev/rules.d/monitor-hotplug.rules > /dev/null
}

function setup_packages {
   local username=$1

   if [[ ! -x $(command -v paru) ]]; then
      install_paru
   fi

   if ! grep -Fxq "[sublime-text]" /etc/pacman.conf; then
      curl -s -O https://download.sublimetext.com/sublimehq-pub.gpg && pacman-key --add sublimehq-pub.gpg && pacman-key --lsign-key 8A8F901A && rm sublimehq-pub.gpg
      echo -e "\n[sublime-text]\nServer = https://download.sublimetext.com/arch/dev/x86_64" | tee --append /etc/pacman.conf > /dev/null
   fi

   arch_packages=()
   user_packages=()

   # hardware-related
   arch_packages+=("fwupd")
   arch_packages+=("mesa")
   arch_packages+=("mesa-utils")
   arch_packages+=("intel-media-driver")
   if nvidia_gpu_exists; then
      arch_packages+=("nvidia")
      arch_packages+=("nvidia-prime")
      arch_packages+=("nvidia-utils")
      arch_packages+=("nvidia-settings")
   fi
   arch_packages+=("vulkan-icd-loader")
   arch_packages+=("vulkan-intel")
   user_packages+=("xsct")
   arch_packages+=("ddcutil")
   arch_packages+=("alsa-firmware")
   arch_packages+=("sof-firmware")
   arch_packages+=("pipewire")
   arch_packages+=("pipewire-audio")
   arch_packages+=("pipewire-alsa")
   arch_packages+=("pipewire-pulse")
   arch_packages+=("pipewire-jack")
   arch_packages+=("wireplumber")
   arch_packages+=("alsa-utils")
   arch_packages+=("networkmanager")
   arch_packages+=("tlp")
   arch_packages+=("acpid")
   arch_packages+=("polkit")

   # x11
   arch_packages+=("xorg-server")
   arch_packages+=("xorg-xinit")
   arch_packages+=("xorg-xrandr")
   arch_packages+=("xorg-xprop")
   arch_packages+=("xorg-xev")
   arch_packages+=("xclip")
   arch_packages+=("xdotool")
   arch_packages+=("picom")
   user_packages+=("i3-git")
   arch_packages+=("i3blocks")
   arch_packages+=("xss-lock")
   user_packages+=("slock-git")

   # default applications
   arch_packages+=("perl-file-mimeinfo")
   arch_packages+=("xdg-utils")
   arch_packages+=("xdg-desktop-portal")
   arch_packages+=("xdg-desktop-portal-gtk")
   user_packages+=("xdg-desktop-portal-termfilechooser-git")

   # utilities
   arch_packages+=("sudo")
   arch_packages+=("nano")
   arch_packages+=("bat")
   arch_packages+=("zip")
   arch_packages+=("jq")
   arch_packages+=("bc")
   arch_packages+=("wgetpaste")
   arch_packages+=("moreutils")
   arch_packages+=("dunst")
   arch_packages+=("libnotify")
   arch_packages+=("rofi")
   arch_packages+=("yazi")
   user_packages+=("svkbd-git")
   arch_packages+=("maim")
   arch_packages+=("ffmpeg")
   arch_packages+=("imagemagick")
   arch_packages+=("id3v2")
   user_packages+=("glances")
   arch_packages+=("man-db")
   arch_packages+=("man-pages")

   # ssh, vpn
   arch_packages+=("openssh")
   arch_packages+=("openvpn")
   arch_packages+=("openconnect")
   user_packages+=("openvpn-update-systemd-resolved")

   # developer tooling
   arch_packages+=("git")
   arch_packages+=("git-delta")
   arch_packages+=("python")
   arch_packages+=("python-pip")
   arch_packages+=("deno")
   arch_packages+=("nodejs")
   arch_packages+=("npm")
   arch_packages+=("rust")
   arch_packages+=("go")
   arch_packages+=("docker")
   arch_packages+=("docker-compose")
   arch_packages+=("aws-cli")
   arch_packages+=("ollama")

   # gtk
   arch_packages+=("gtk3")
   arch_packages+=("gtk4")

   # window applications
   arch_packages+=("kitty")
   arch_packages+=("zed")
   arch_packages+=("sublime-text")
   arch_packages+=("sublime-merge")
   arch_packages+=("feh")
   arch_packages+=("mpv")
   arch_packages+=("firefox-developer-edition")
   arch_packages+=("chromium")
   arch_packages+=("calibre")
   arch_packages+=("transmission-gtk")

   # virtualisation
   arch_packages+=("libvirt")
   arch_packages+=("qemu-base")
   arch_packages+=("virt-manager")
   arch_packages+=("dnsmasq")
   arch_packages+=("iptables-nft")

   # fonts
   arch_packages+=("adobe-source-sans-fonts")
   arch_packages+=("adobe-source-serif-fonts")
   arch_packages+=("adobe-source-code-pro-fonts")
   arch_packages+=("adobe-source-han-serif-otc-fonts")
   arch_packages+=("ttf-jetbrains-mono")
   arch_packages+=("ttf-nerd-fonts-symbols-mono")

   # install packages
   echo "$username ALL=(ALL:ALL) NOPASSWD: ALL" | EDITOR="tee --append" visudo > /dev/null
   as_user $username paru -Syu --noconfirm &&
   as_user $username paru -S --useask --ask 4 --needed --noconfirm "${arch_packages[@]}" "${user_packages[@]}" || {
      head -n -1 /etc/sudoers | EDITOR="tee" visudo > /dev/null
      echo "Failed to update packages, aborting" >&2
      exit 1
   }
   head -n -1 /etc/sudoers | EDITOR="tee" visudo > /dev/null

   # clean up unused packages
   pacman -Qdtq | ifne pacman -Rns --noconfirm -
   pacman -Qqd | pacman -Rsu --noconfirm - 2> >(grep -v '^warning: removing [^ ]* from target list$' 1>&2)

   # groups, services, configuration
   usermod -aG docker "$username"
   usermod -aG libvirt "$username"

   if [[ $(stat -c %d:%i /) == $(stat -c %d:%i /proc/1/root/.) ]]; then
      start="--now"
   fi

   systemctl --user --machine="$username@" enable $start pipewire-pulse.service
   systemctl enable $start NetworkManager
   systemctl enable $start acpid.service
   systemctl enable $start tlp.service
   systemctl mask systemd-rfkill.service  # tlp
   systemctl mask systemd-rfkill.socket   # tlp
   systemctl disable systemd-resolved 2> /dev/null
   systemctl disable docker.service 2> /dev/null
   systemctl disable libvirtd.service 2> /dev/null
   systemctl disable ollama 2> /dev/null

   sed -i 's/#unix_sock_group/unix_sock_group/g'                /etc/libvirt/libvirtd.conf
   sed -i 's/#unix_sock_rw_perms/unix_sock_rw_perms/g'          /etc/libvirt/libvirtd.conf
   sed -i 's/#user = "libvirt-qemu"/user = "'"$username"'"/g'   /etc/libvirt/qemu.conf
   sed -i 's/#group = "libvirt-qemu"/group = "'"$username"'"/g' /etc/libvirt/qemu.conf

   # default applications
   echo '' | as_user $username tee "/home/$username/.config/mimeapps.list" > /dev/null
   as_user $username xdg-mime default yazi.desktop                      inode/directory x-directory/normal
   as_user $username xdg-mime default dev.zed.Zed.desktop               text/plain
   as_user $username xdg-mime default kitty.desktop                     x-scheme-handler/terminal
   as_user $username xdg-mime default firefox-developer-edition.desktop $(cat /usr/share/applications/firefox-developer-edition.desktop | grep MimeType= | sed 's/MimeType=\(.*\)/\1/' | sed 's/;/ /g')
   as_user $username xdg-mime default feh.desktop                       $(cat /usr/share/applications/feh.desktop                       | grep MimeType= | sed 's/MimeType=\(.*\)/\1/' | sed 's/;/ /g')
   as_user $username xdg-mime default mpv.desktop                       $(cat /usr/share/applications/mpv.desktop                       | grep MimeType= | sed 's/MimeType=\(.*\)/\1/' | sed 's/;/ /g')
   as_user $username xdg-mime default transmission-gtk.desktop          $(cat /usr/share/applications/transmission-gtk.desktop          | grep MimeType= | sed 's/MimeType=\(.*\)/\1/' | sed 's/;/ /g')
   update-desktop-database /usr/share/applications
}

function setup_firmware {
   pacman -S --needed --noconfirm fwupd
   fwupdmgr --no-reboot-check --force refresh
   fwupdmgr --no-reboot-check update
}

function install_paru {
   local url="https://aur.archlinux.org/cgit/aur.git/snapshot/paru.tar.gz"
   local dir="/var/tmp/paru"
   pacman -S --needed --noconfirm git rust
   extract_tarball "$url" "$dir"
   chmod 777 "$dir"
   as_nobody /bin/bash -c "cd $dir && CARGO_HOME=$dir makepkg"
   pacman -U --needed --noconfirm "$(ls $dir/*.tar.zst | grep -v debug)"
   rm -rf "$dir"
}

function extract_tarball {
   local url="$1"
   local dir="$2"
   mkdir -p "$dir"
   rm -rf "$dir/"*
   curl -s -L "$url" | tar xz -C "$dir" --strip-components 1
}

function wrap_f {
   local args=("$@")
   local str="set -e; $(declare -f);"
   for i in "${args[@]}"; do
       str+=" \"$(echo "$i" | sed 's/"/\\"/g')\""
   done
   echo "$str"
}

function as_sudo {
   sudo bash -c "$(wrap_f "$@")"
}

function as_nobody {
   su nobody -s /bin/bash -c "$(wrap_f "$@")"
}

function as_user {
   local user=$1
   shift
   su "$user" -s /bin/bash -c "$(wrap_f "$@")"
}

function as_chroot {
   arch-chroot /mnt /bin/bash -c "$(wrap_f "$@")"
}

function nvidia_gpu_exists {
   if ! lspci | grep -q '.* VGA .* NVIDIA .*'; then
      return 1
   fi
}

function github_repo_exists {
   local path=$1
   local token=$2
   local headers=""
   if [[ -n $token ]]; then
      headers="Authorization: Bearer $token"
   fi
   if curl -s -H "$headers" $(github_api_url "$path") | grep -q "Not Found"; then
      return 1
   fi
}

function github_repo_url {
   local repo=$1
   local token=$2
   if [[ -n $token ]]; then
      token="$token@"
   fi
   echo "https://${token}github.com/$repo.git"
}

function github_repo_archive_url {
   local repo=$1
   local branch=$2
   echo "https://github.com/$repo/archive/refs/heads/$branch.tar.gz"
}

function github_repo_file_url {
   local repo=$1
   local path=$2
   echo "https://raw.githubusercontent.com/$repo/master/$path"
}

function github_api_url {
   local repo=$1
   echo "https://api.github.com/repos/$repo"
}

if [[ $2 == "--no-gpu" ]]; then
   graphics="intel"
fi

case "$1" in
   system)        setup_system;;
   system-config) as_sudo setup_system_config "$(whoami)" "$graphics";;
   firmware)      setup_firmware;;
   packages)      as_sudo setup_packages "$(whoami)";;
esac
