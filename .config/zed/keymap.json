// "ctrl-e": "diagnostics::Deploy"                            // TODO assign
// "shift-f2": "go_to_line::Toggle",
// "ctrl-shift-g": "editor::FindAllReferences"           // nije loše ali vidit još s onim goto definition itd
// "ctrl-space": "editor::ShowCompletions",                                    // TODO assign
// "alt-q": "editor::Fold",                                    // TODO assign, paired with UnfoldLines? is there no ToggleFold? maybe we can fallback
// "alt-w": "editor::JoinLines",
// "alt-e": "editor::GoToDiagnostic",
// "alt-shift-e": "editor::GoToPrevDiagnostic",
// "alt-t": "editor::GoToDefinitionSplit",
// "alt-shift-t": "editor::GoToDefinition",                // TODO assign, also see GoToImplementation but it doesnt work in js? maybe we can fallback
// "alt-a": "editor::SelectLargerSyntaxNode",
// "alt-shift-a": "editor::SelectSmallerSyntaxNode",
// "alt-s": "editor::SplitSelectionIntoLines",
// "ctrl-b": "editor::ToggleGitBlame",

// "alt-b": "editor::GoToHunk",
// "alt-shift-b": "editor::GoToPrevHunk",
// "ctrl-alt-b": "editor::ToggleHunkDiff",
// "ctrl-alt-shift-b": "editor::ToggleHunkDiff",
// "ctrl-h": "editor::ToggleInlayHints",
// "ctrl-<": "editor::Format",
// "alt-<": "editor::ConvertToLowerCase",
// "alt->": "editor::ConvertToUpperCase",        // ctrl-shift-< doesn't work?
// "alt-d": "editor::DuplicateLineDown",
// "alt-shift-d": "editor::DuplicateLineUp",
// "alt-x": "editor::DeleteLine",
// "alt-c": ["editor::ToggleComments", { "advance_downwards": false }],
// "ctrl-b": "editor::ToggleSoftWrap",

// //     "alt-]": "editor::NextInlineCompletion",
// //     "alt-[": "editor::PreviousInlineCompletion",
// //     "alt-right": "editor::AcceptPartialInlineCompletion"
// //      "alt-\\": "editor::ShowInlineCompletion"                // this one we might be able to toggle with ctrl+space (toggling between this and dthe dropdown)

[
   {
      "context": "Workspace",
      "bindings": {
         "f1": "command_palette::Toggle",
         "f2": ["file_finder::Toggle", { "separate_history": true }],
         "f3": "language_selector::Toggle",
         "f4": ["projects::OpenRecent", { "create_new_window": false }],
         "f5": "workspace::ToggleBottomDock",
         "f6": "workspace::ToggleLeftDock",
         "f7": "workspace::ToggleRightDock",
         "f10": "workspace::ToggleZoom",
         "f11": "zed::ToggleFullScreen",
         "ctrl-'": "zed::DecreaseBufferFontSize",
         "ctrl--": "zed::DecreaseBufferFontSize",
         "ctrl-+": "zed::IncreaseBufferFontSize",
         "ctrl-0": "zed::ResetBufferFontSize",
         "ctrl-tab": "pane::ActivateNextItem",
         "ctrl-shift-tab": "pane::ActivatePrevItem",
         "alt-1": ["pane::ActivateItem", 0],
         "alt-2": ["pane::ActivateItem", 1],
         "alt-3": ["pane::ActivateItem", 2],
         "alt-4": ["pane::ActivateItem", 3],
         "alt-5": ["pane::ActivateItem", 4],
         "alt-6": ["pane::ActivateItem", 5],
         "alt-7": ["pane::ActivateItem", 6],
         "alt-8": ["pane::ActivateItem", 7],
         "alt-9": ["pane::ActivateItem", 8],
         "up": "menu::SelectPrev",
         "down": "menu::SelectNext",
         "tab": "menu::SelectNext",
         "shift-tab": "menu::SelectPrev",
         "pageup": "menu::SelectFirst",
         "pagedown": "menu::SelectLast",
         "home": "menu::SelectFirst",
         "end": "menu::SelectLast",
         "enter": "menu::Confirm",
         "ctrl-enter": "menu::SecondaryConfirm",
         "escape": "menu::Cancel",
         "ctrl-t": "workspace::NewFile",
         "ctrl-shift-t": "pane::ReopenClosedItem",
         "ctrl-s": "workspace::Save",
         "ctrl-shift-s": "workspace::SaveAll",
         "ctrl-w": "pane::CloseActiveItem",
         "ctrl-shift-w": "pane::CloseInactiveItems",
         "ctrl-alt-shift-w": "workspace::CloseInactiveTabsAndPanes",
         "ctrl-g": ["pane::DeploySearch", { "replace_enabled": true }],
         "alt-shift-c": "search::ToggleCaseSensitive",
         "alt-shift-w": "search::ToggleWholeWord",
         "alt-shift-r": "search::ToggleRegex",
         "alt-shift-s": "search::ToggleSelection"
      }
   },
   {
     "context": "TabSwitcher",
     "bindings": {
       "delete": "tab_switcher::CloseSelectedItem",
       "ctrl-backspace": "tab_switcher::CloseSelectedItem"
     }
   },
   {
      "context": "ProjectPanel",
      "bindings": {
         "left": "project_panel::CollapseSelectedEntry",
         "right": "project_panel::ExpandSelectedEntry",
         "ctrl-n": "project_panel::NewFile",
         "ctrl-shift-n": "project_panel::NewDirectory",
         "ctrl-x": "project_panel::Cut",
         "ctrl-c": "project_panel::Copy",
         "ctrl-v": "project_panel::Paste",
         "ctrl-d": "project_panel::Duplicate",
         "ctrl-alt-c": "project_panel::CopyPath",
         "ctrl-alt-shift-c": "project_panel::CopyRelativePath",
         "ctrl-g": ["project_panel::NewSearchInDirectory", { "replace_enabled": true }],
         "delete": ["project_panel::Trash", { "skip_prompt": false }],
         "shift-delete": ["project_panel::Trash", { "skip_prompt": true }]
      }
   },
   {
     "context": "ProjectPanel && not_editing",
     "bindings": {
        "enter": "project_panel::Rename",
        "space": "project_panel::Open"
     }
   },
   {
     "context": "OutlinePanel",
     "bindings": {
       "left": "outline_panel::CollapseSelectedEntry",
       "right": "outline_panel::ExpandSelectedEntry",
       "space": "outline_panel::Open",
       "ctrl-alt-c": "outline_panel::CopyPath",
       "ctrl-alt-shift-c": "outline_panel::CopyRelativePath"
     }
   },
   {
      "context": "Terminal",
      "bindings": {
         "up": ["terminal::SendKeystroke", "up"],
         "down": ["terminal::SendKeystroke", "down"],
         "pageup": ["terminal::SendKeystroke", "pageup"],
         "pagedown": ["terminal::SendKeystroke", "pagedown"],
         "shift-up": "terminal::ScrollLineUp",
         "shift-down": "terminal::ScrollLineDown",
         "shift-pageup": "terminal::ScrollPageUp",
         "shift-pagedown": "terminal::ScrollPageDown",
         "shift-home": "terminal::ScrollToTop",
         "shift-end": "terminal::ScrollToBottom",
         "enter": ["terminal::SendKeystroke", "enter"],
         "escape": ["terminal::SendKeystroke", "escape"],
         "ctrl-t": "workspace::NewTerminal",
         "ctrl-c": "terminal::Copy",
         "ctrl-v": "terminal::Paste",
         "ctrl-shift-c": ["terminal::SendKeystroke", "ctrl-c"]
      }
   },
   {
      "context": "Editor",
      "bindings": {
         "up": "editor::MoveUp",
         "down": "editor::MoveDown",
         "left": "editor::MoveLeft",
         "right": "editor::MoveRight",
         "shift-up": "editor::SelectUp",
         "shift-down": "editor::SelectDown",
         "shift-left": "editor::SelectLeft",
         "shift-right": "editor::SelectRight",
         "ctrl-up": "editor::MoveLineUp",
         "ctrl-down": "editor::MoveLineDown",
         "ctrl-left": "editor::MoveToPreviousWordStart",
         "ctrl-right": "editor::MoveToNextWordEnd",
         "alt-up": "editor::AddSelectionAbove",
         "alt-down": "editor::AddSelectionBelow",
         "alt-left": "editor::MoveToPreviousSubwordStart",
         "alt-right": "editor::MoveToNextSubwordEnd",
         "ctrl-shift-up": "editor::MoveLineUp",
         "ctrl-shift-down": "editor::MoveLineDown",
         "ctrl-shift-left": "editor::SelectToPreviousWordStart",
         "ctrl-shift-right": "editor::SelectToNextWordEnd",
         "alt-shift-left": "editor::SelectToPreviousSubwordStart",
         "alt-shift-right": "editor::SelectToNextSubwordEnd",
         "tab": "editor::Tab",
         "shift-tab": "editor::TabPrev",
         "ctrl-space": "editor::ShowCompletions",
         "escape": "editor::Cancel",
         "backspace": "editor::Backspace",
         "shift-backspace": "editor::Backspace",
         "ctrl-backspace": "editor::DeleteToPreviousWordStart",
         "alt-backspace": "editor::DeleteToPreviousSubwordStart",
         "delete": "editor::DeleteToNextWordEnd",
         "ctrl-delete": "editor::DeleteToEndOfLine",
         "pageup": "editor::PageUp",
         "pagedown": "editor::PageDown",
         "shift-pageup": "editor::SelectPageUp",
         "shift-pagedown": "editor::SelectPageDown",
         "insert": "editor::MoveToEnclosingBracket",
         "home": "editor::MoveToBeginningOfLine",
         "end": "editor::MoveToEndOfLine",
         "shift-home": ["editor::SelectToBeginningOfLine", { "stop_at_soft_wraps": true }],
         "shift-end": ["editor::SelectToEndOfLine", { "stop_at_soft_wraps": true }],
         "ctrl-home": "editor::MoveToBeginning",
         "ctrl-end": "editor::MoveToEnd",
         "ctrl-shift-home": "editor::SelectToBeginning",
         "ctrl-shift-end": "editor::SelectToEnd",
         "ctrl-a": "editor::SelectAll",
         "ctrl-shift-a": "editor::SelectLine",
         "ctrl-x": "editor::Cut",
         "ctrl-c": "editor::Copy",
         "ctrl-v": "editor::Paste",
         "ctrl-z": "editor::Undo",
         "ctrl-shift-y": "editor::Undo",
         "ctrl-y": "editor::Redo",


         "alt-x": "editor::DeleteLine",
         "alt-c": ["editor::ToggleComments", { "advance_downwards": false }],
         "alt-d": "editor::DuplicateLineDown",


         "alt-f": "editor::SelectNext",
         "alt-shift-f": "editor::SelectPrevious",
         // "alt-d": ["editor::SelectNext", { "replace_newest": true }],
         // "alt-shift-d": ["editor::SelectPrevious", { "replace_newest": true }],
         "alt-g": "editor::SelectAllMatches"
      }
   },
   {
      "context": "Editor && mode == full",
      "bindings": {
         "enter": "editor::Newline",
         "shift-enter": "editor::Newline",
         "ctrl-enter": "editor::NewlineBelow",
         "ctrl-shift-enter": "editor::NewlineAbove",
         "ctrl-alt-c": "editor::CopyPath",
         "ctrl-alt-shift-c": "editor::CopyRelativePath"
      }
   },
   {
     "context": "Editor && inline_completion",
     "bindings": {
       "tab": "editor::AcceptInlineCompletion"
     }
   },
   {
     "context": "Editor && (showing_completions || showing_code_actions)",
     "bindings": {
       "up": "editor::ContextMenuPrev",
       "down": "editor::ContextMenuNext",
       "pageup": "editor::ContextMenuFirst",
       "pagedown": "editor::ContextMenuLast"
     }
   },
   {
     "context": "Editor && showing_completions",
     "bindings": {
       "tab": "editor::ComposeCompletion",
       "enter": "editor::ConfirmCompletion"
     }
   },
   {
     "context": "Editor && showing_code_actions",
     "bindings": {
       "enter": "editor::ConfirmCodeAction"
     }
   },
   {
      "bindings": {
         "fn-①": "search::FocusSearch",
         "fn-②": "search::ReplaceNext"
      }
   },
   {
      "context": "Editor && mode == full",
      "bindings": {
         "ctrl-f": "buffer_search::Deploy",
         "ctrl-shift-f": "buffer_search::Deploy",
         "ctrl-r": ["buffer_search::Deploy", { "replace_enabled": true }],
         "ctrl-h": ["buffer_search::Deploy", { "replace_enabled": true, "selection_search_enabled": true }]
      }
   },
   {
      "context": "BufferSearchBar",
      "bindings": {
         "ctrl-h": "search::ToggleSelection",
         "enter": "search::SelectNextMatch",
         "shift-enter": "search::SelectPrevMatch",
         "ctrl-enter": "search::SelectAllMatches"
      }
   },
   {
     "context": "BufferSearchBar || ProjectSearchBar",
     "bindings": {
       "up": "search::PreviousHistoryQuery",
       "down": "search::NextHistoryQuery",
       "ctrl-f": "search::SelectNextMatch",
       "ctrl-shift-f": "search::SelectPrevMatch"
     }
   },
   {
      "context": "(BufferSearchBar || ProjectSearchBar) && !in_replace",
      "bindings": {
         "ctrl-r": "search::ToggleReplace",
         "ctrl-shift-r": "search::ToggleReplace"
      }
   },
   {
      "context": "(BufferSearchBar || ProjectSearchBar) && in_replace",
      "bindings": {
         "enter": ["workspace::SendKeystrokes", "fn-② fn-① tab"],   // hack because ReplaceNext switches focus to editor
         "ctrl-r": ["workspace::SendKeystrokes", "fn-② fn-① tab"],  // hack because ReplaceNext switches focus to editor
         "ctrl-t": "search::ReplaceAll"
      }
   },
   {
     "context": "Markdown",
     "bindings": {
       "ctrl-c": "markdown::Copy"
     }
   }
]


// {
//    "context": "BufferSearchBar",
//    "bindings": {
//       "ctxl-enter": "search::SelectAllMatches"
//       // "tab": "buffer_search::FocusEditor"            // hard-coded
//    }
// },
// {
//    "context": "ProjectSearchBar",
//    "bindings": {
//       "enter": ""                                    // hard-coded to perform search and can't be remapped as the command is not exposed?
//    }
// },
// I FUCKING HATE THIS FUCK YOU GUYS maybe a pull request????
// {
//    "context": "Workspace",
//    "bindings": {
//       // "f7": ["workspace::ToggleRightDock", { "focus": true }],
//       "f7": ["outline_panel::ToggleFocus", { "focus": true }],
//       "f8": ["assistant::ToggleFocus", { "focus": true }],
//    }
// }
// // this is interestingly all we've got
// // "ctrl-k up": "pane::SplitUp",
// // "ctrl-k down": "pane::SplitDown",
// // "ctrl-k left": "pane::SplitLeft",
// // "ctrl-k right": "pane::SplitRight"

// // assistant related inline completions, will try after ollama

// // {
// //   "context": "Editor && !inline_completion",
// //   "bindings": {
// //   }
// // },
// // this one is also assistant related
// // // {
// //   "context": "ContextEditor > Editor",
// //   "bindings": {
// //     "ctrl-enter": "assistant::Assist",
// //   }
// // },
// // this too
// // {
// //   "context": "PromptLibrary",                               // TODO what is this...
// //   "bindings": {
// //     "ctrl-n": "prompt_library::NewPrompt",
// //     "ctrl-shift-s": "prompt_library::ToggleDefaultPrompt"
// //   }
// // },
// // collab and channel
// // {
// //   "context": "CollabPanel && not_editing",
// //   "bindings": {
// //     "ctrl-backspace": "collab_panel::Remove",
// //     "space": "menu::Confirm"
// //   }
// // },
// // {
// //   "context": "(CollabPanel && editing) > Editor",
// //   "bindings": {
// //     "space": "collab_panel::InsertSpace"
// //   }
// // },
// // {
// //   "context": "ChannelModal",
// //   "bindings": {
// //     "tab": "channel_modal::ToggleMode"
// //   }
// // },
// // {
// //   "context": "ChannelModal > Picker > Editor",
// //   "bindings": {
// //     "tab": "channel_modal::ToggleMode"
// //   }
// // },

// // TODO FIX INDENTATION WHEN DONE

// // this shit still unclear
// // "ctrl-u": ["picker::ConfirmInput", { "secondary": true }],
// // "ctrl-u": ["picker::ConfirmInput", { "secondary": false }],
// // "alt-enter": ["picker::ConfirmInput", { "secondary": false }],     // TODO what is picker
// // "ctrl-alt-enter": ["picker::ConfirmInput", { "secondary": true }], // TODO what is picker
















// // TODO these were on top
// // "": "editor::ExpandAllHunkDiffs",
// // "": "pane::RevealInProjectPanel",           // TODO also output_panel/project_panel::RevealInFileManager and possibly others
// // "": "editor::RevealInFileManager",          // TODO also output_panel/project_panel::RevealInFileManager and possibly others





//  and this was on the very top
//
// // f8
// // f9
// // f12
// // alt-1
// // alt-2
// // alt-3
// // alt-4
// // alt-5
